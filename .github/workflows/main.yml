name: Minilink CI/CD Pipeline

on:
  push:
    branches: [ master ]

env:
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepara Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Instala dependências
        run: npm ci

      - name: Executa os testes
        run: npm test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepara Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Instala dependências
        run: npm ci

      - name: Executa o lint
        run: npm run lint

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login no Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Construir Imagem
        run: |
          docker buildx build --load  -t ${{ secrets.DOCKER_HUB_USERNAME }}/minilink:${{ env.DOCKER_TAG }} .
      
      - name: Publicar Imagem
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/minilink:${{ env.DOCKER_TAG }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Instalar SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

    - name: Deploy na AWS
      run: |
        ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "cd ${{ secrets.APP_DIRECTORY }} && \
             docker compose -f ${{ vars.COMPOSE_FILE }} pull && \
             docker compose -f ${{ vars.COMPOSE_FILE }} down && \
             docker compose -f ${{ vars.COMPOSE_FILE }} up -d"